속성 (Property)
class User {
    val age: Int
        get() {
            본문
        }
        set(value: Int) {
            본문
        }
    val name: String


    constructor(age: Int, name: String) {
        this.age = age
        this.name = name
    }
}
-> 프로퍼티 : age, name
user.age / user.name -> 코틀린이 getter를 호출해준다.
user.age = 20       -> 코틀린이 setter를 호출해준다.

1. getter/setter
- getter : 클래스의 속성에 접근할 때
- setter : 클래스의 속성의 값을 설정할 때
- 기본적으로 코틀린이 제공해주지만, 특별한 기능을 추가하고 싶을 땐 개발자가 직접 작성

2. late init
class User {
    lateinit var age: Int
    lateinit var name: String
}
- var로 선언한 프로퍼티에만 적용 가능
- 주 생성자에서는 사용할 수 없다
- getter/setter 사용 불가능
- nullable에는 사용 불가능
- 기초타입 프로퍼티에는 적용이 불가능
    - 원시적 자료형(Primitive type)
    - String을 제외한 우리가 흔히 쓰는 자료형
- isInitialized로 초기화 여부를 확인


더블 클론 (::)
- Reflaction 기능
- 런타임에 프로그램의 구조를 조사 할 수 있는 기능
- lateinit의 초기화 여부는 런타임이 아니면 알 수 없다.

lazy
- 초기화를 미루고 미루고 미루다가 정말로 필요한(접글할 때) 순간에 초기화 하겠다.
- lazy 선언된 변수는 선언이 될 때, 혹은 init 블록에서가 아니라 실제로 접근할 때 초기화가 이루어진다.